watch모드
타입스크립트가 파일을 관찰하고 파일에 변경 사항이 있을 때마다 다시 컴파일함.
tsc 파일명.ts --watch
tsc 파일명.ts -w
단점 : 파일하나를 직접 지정해야한다.

tsc --init
명령어를 사용하면 해당 명령어를 사용한 디렉토리 위치 하위에 있는 모든 TS파일을 타입스크립트가 관리하게 된다.
명령어를 실행시키면 tsconfig.json파일이 생성됨.
이후 tsc 명령어를 실행시키면 파일을 지정하지 않아도 해당 디렉토리 하위에 있는 모든 TS파일을 컴파일 함.
여기서 tsc -w를 통해 모든 ts파일을 와치모드로 통합시킬 수 있음.

tsconfig.json
"exclude": [] 옵션을 통해 배열안에 tsc를 실행할 때 컴파일 시 포함되어서는 안되는 파일을 넣을 수 있음. *를 사용할 수도 있고, **/를 사용할 수 도 있다.
exclude 옵션에 node_modules 를 지정할 수 있지만, exclude 옵션이 명시되어 있지 않다면, node_modules는 default설정 상 자동으로 제외된다.
"include": [] 옵션을 사용하게되면 include 배열 안에 들어가있는 ts파일만 컴파일 하게된다. 배열안에 없다면 컴파일 하지 않는다. 즉 제외하고자 하는 항목으로 전체폴더를 지정하고, 예외로 include 배열 안에 있는 ts파일만 컴파일 하는 것이다. include를 사용해 포함된 파일들은 exclude를 사용해 필터링 할 수 있다.
files옵션은 include옵션과 비슷하지만, exclude를 사용해 필터링 되지 않는다.

compilerOptions
타입스크립트 코드가 컴파일 되는 방식을 관리한다.
target 옵션 - 어떤 자바스크립트 버전을 대상으로 코드를 컴파일 할 것인지 결정 -> es5로 설정해서 이전 브라우저에서도 작동하는 자바스크립트 코드를 생성할 수 있음.
lib 옵션
자바스크립트의 버전에 맞는 기능들을 타입스크립트가 인식할 수 있도록 하는 옵션. lib옵션이 명시되어있지 않다면 target에 설정된 자바스크립트 버전을 기본 설정으로 따라간다. 즉 타입스크립트가 const, let, documnt, querySelector 같은 것들이 어떤것은 자바스크립트에 내장된 기능이고, 또 어떤것은 dom API라는 것 을 인식시켜서 오류가 나지 않게 하는 옵션이다.
만약 lib옵션을 설정하고 배열 안에 아무것도 넣지 않으면, document 같은 코드들이 걸려 컴파일 에러가 뜬다. 배열에서 ctrl space로 사용가능한 옵션을 볼 수 있다.
allowJs
타입스크립트가 자바스크립트 파일도 컴파일 할 수 있게 하는 옵션
checkJs
타입스크립트가 자바스크립트 파일의 구문을 검사하고 잠재적인 에러를 보고할 수 있게 하는 옵션
sourceMap
소스 맵 옵션을 활성화 하면, 컴파일 시 js.map 파일이 추가로 생긴다. 이 파일은 브라우저의 개발자 도구 source 탭에서 개발자가 js파일 외에도 ts파일을 볼 수 있게 해준다. 이를 통해서 ts파일을 개발자 도구에서 열어 중단점을 걸고 디버깅을 할 수도 있다. 
outDir
ts파일을 컴파일 하면 생성되는 파일이 저장되는 위치를 설정해주는 옵션
rootDir 옵션에서 지정한 디렉토리 구조를 그대로 복사하는 역할도 한다.
rootDir
루트 디렉토리를 지정하는 옵션. rootDir로 지정한 디렉토리 위치부터 파일들이 컴파일러에 입력된다.
removeComments
타입스크립트에서 작성된 주석들을 자바스크립트로 컴파일 하면서 모두 지워주는 옵션
noEmit
타입스크립트에서 자바스크립트로 컴파일 할 때, 자바스크립트 파일을 만들지 않게 해주는 옵션. 컴파일하면서 코드에 에러가 있는지 없는지 확인만 하고 싶을 때 사용하면, 출력파일을 작성하는데 드는 시간을 절약할 수 있음.
noEmitOnError
타입스크립트 컴파일 시, 오류가 발생하면 자바스크립트 파일을 만들지 않게 해주는 옵션
https://www.typescriptlang.org/docs/handbook/tsconfig-json.html
https://www.typescriptlang.org/docs/handbook/compiler-options.html


strict 옵션
strict 옵션을 활성화하면 하위 옵션 모두 활성화 하는 것임.
그게 싫다면 strict옵션을 활성화하고, 하위 옵션들 중 원하는 것들을 비활성화 하면 됨.
noImplicitAny
함수의 매개변수와 값을 명확히 할 수 있게 해주는 옵션. 이 옵션이 활성화 되어 있을 때, 함수의 매개변수의 타입을 명확히 설정하지 않으면 에러가 난다.
strictNullCheck
null 값을 잠재적으로 가질 수 있는 값에 접근하고 작업하는 방식을 타입스크립트에게 매우 엄격하게 알려주는 옵션. 이 옵션을 설정하게 되면, null 값이 될 가능성이 있는 변수로 작업을 할 시, 에러가 난다. 이 옵션을 설정하고 null 값이 될 가능성이 있는 변수로 작업을 하고 싶다면, !를 사용하거나 if로 검사해서 해당 변수가 truthy일 경우만 작업을 하면 된다.
strictBindCallApply
호출하려는 함수가 bind, call, apply 중 무엇에 해당하는지 확인하고 함수를 제대로 설정했는지 확인하는 옵션
alwaysStrict
strict모드를 사용하는 자바스크립트 파일이 추가되도록 하는 옵션

noUnusedLocals, noUnusedParameters, noImplicitReturns
코드 품질을 향상시켜주는 옵션.
위 옵션을 활성화 하면, 사용되지 않는 변수가 있으면 에러를 표시함.
전역에서 설정된 변수가 사용되지않는다면, 무시함.
타입스크립트는 다른 스크립트 파일에서 해당 변수가 사용될 수 있다는 사실을 모르기 때문에, 혀용해주는 것.

